trigger:
  branches:
    include:
    - main
  paths:
    include:
    - terraform/
    exclude:
    - README.md
  
variables:
  - name: terraformfilepath
    value: terraform
  - group: TfBackendState
  - name: terraformVersion
    value: 0.14.6
  - name: serviceConnectionName
    value: AzureConnection
  - name: DeleteInfraStructure
    value: false 

pool:
  vmImage: 'ubuntu-latest'
stages:
- stage:
  condition: and(succeeded(), eq(variables.DeleteInfraStructure, false))
  displayName: 'Terraform Plan'
  jobs:
  - job: InfrastructureProvisioning
    steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: '$(terraformVersion)'
      - task: TerraformTaskV1@0
        displayName: "terraform init"
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(terraformfilepath)'
          backendServiceArm: 'AzureConnection'
          backendAzureRmResourceGroupName: '$(terraformStateResourceGroupName)'
          backendAzureRmStorageAccountName: '$(terraformStateStorageAccountName)'
          backendAzureRmContainerName: '$(terraformStateContainerName)'
          backendAzureRmKey: '$(terraformStatefileName)'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: '-out=${BUILD_BUILDNUMBER}.tfplan'
          workingDirectory: '$(terraformfilepath)'
          environmentServiceNameAzureRM: '$(serviceConnectionName)'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        name:  TerraformApply
        displayName: 'Terraform apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
          workingDirectory: '$(terraformfilepath)'
          environmentServiceNameAzureRM: '$(serviceConnectionName)' 
      
      - task: CmdLine@2
        displayName: 'Generate Terraform Output'
        inputs:
          script: 'terraform output && terraform output -json > $(Build.SourcesDirectory)/terraform-output.json'
          workingDirectory: '$(terraformfilepath)'

      - powershell: |
          $terraformOutput = Get-Content "$(Build.SourcesDirectory)/terraform-output.json" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs

- stage:
  displayName: 'Terraform Destroy'
  condition: and(succeeded(), eq(variables.DeleteInfraStructure, true))

  jobs:
  - job: CleanUpInfrastrucutre
    steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: '$(terraformVersion)'
      - task: TerraformTaskV1@0
        displayName: "terraform init"
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(terraformfilepath)'
          backendServiceArm: 'AzureConnection'
          backendAzureRmResourceGroupName: '$(terraformStateResourceGroupName)'
          backendAzureRmStorageAccountName: '$(terraformStateStorageAccountName)'
          backendAzureRmContainerName: '$(terraformStateContainerName)'
          backendAzureRmKey: '$(terraformStatefileName)'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: '-out=${BUILD_BUILDNUMBER}.tfplan'
          workingDirectory: '$(terraformfilepath)'
          environmentServiceNameAzureRM: '$(serviceConnectionName)'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        name:  TerraformDestroy
        displayName: 'Terraform Destory'
        inputs:
          provider: 'azurerm'
          command: 'destroy'
          commandOptions: '${BUILD_BUILDNUMBER}.tfplan'
          workingDirectory: '$(terraformfilepath)'
          environmentServiceNameAzureRM: '$(serviceConnectionName)' 